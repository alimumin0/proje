<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        A/z/gAP8/8AP/A==
</value>
  </data>
</root>